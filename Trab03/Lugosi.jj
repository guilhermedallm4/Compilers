/*
javacc Lugosi.jj

javac *.java

java -cp . Lugosi prog1.lug
*/

PARSER_BEGIN(Lugosi)
import java.io.*;
public class Lugosi {

  public static void main(String args[]) throws ParseException,IOException {
    
 Lugosi analisador = new Lugosi(new FileInputStream(args[0]));
 analisador.Lugosi();
  }

}

PARSER_END(Lugosi)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <VOID: "void">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <APAR: "(">
| <FPAR: ")">
| <LET: "let">
| <PONTOVIRGULA: ";">
| <FLOAT: "float">
| <BOOL: "bool">
| <ATRIBUICAO: ":=">
| <IF: "if">
| <WHILE: "while">
| <DO: "do">
| <READIO: "readIO">
| <RETURN: "return">
| <PRINTIO: "printIO">
| <TRUE: "true">
| <FALSE: "false">
| <SOMA: "+">
| <SUB: "-">
| <MULT: "*">
| <DIV: "/">
| <AND: "&&">
| <OR: "||">
| <MENOR: "<">
| <MAIOR: ">">
| <IGUALDADE: "==">
| <VIRGULA: ",">
| <DEF: "def">
}

TOKEN :
{
  <NUM : (["0"-"9"])+ ("."(["0"-"9"])+)? ("E"(["+","-"])? (["0"-"9"])+)?>
| <ID: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])* ("_"(["a"-"z","A"-"Z","0"-"9"])+)*>

}


//LUGOSI -> MAIN FUNC?

void Lugosi ():
{Token t;}
{
  Main() (Func())?
}

// MAIN -> "void" "main" "{" VARDECL SEQCOMANDOS "}"

void Main():
{}
{
  <VOID> <MAIN> <ACHAVES> VarDecl() SeqComandos() <FCHAVES>
}



/* 
VARDECL -> "let" TIPO TOKEN_id ";" VARDECLLINE 
VARDECLLINE -> "let" TIPO TOKEN_id ";" VARDECLLINE | vazio
*/

void VarDecl():
{}
{

  (<LET> Tipo() TokenId() <PONTOVIRGULA> VarDecl())?

}



// TIPO -> "float" | "bool" | "void"

void Tipo():
{}
{

  <FLOAT> | <BOOL> | <VOID> 

}

void TokenId():
{}
{

  <ID>

}


/* 
SEQCOMANDOS -> COMANDO SEQCOMANDOSLINE
SEQCOMANDOSLINE -> COMANDO SEQCOMANDOSLINE | Vazio
*/

void SeqComandos():
{}
{

  (Comando() SeqComandosLine())

}

void SeqComandosLine():
{}
{

  (Comando() SeqComandosLine())?

}

/*
COMANDO -> TOKEN_id TOKENIDLINE
| "if" EXP "{" SEQCOMANDOS "}" ";"
| "while" EXP "do" "{" SEQCOMANDOS "}" ";""
| "return" EXP ";"
| "printIO" EXP ";"
*/

void Comando():
{}
{
(TokenId() TokenIdLine())
| (<IF> Exp() <ACHAVES> SeqComandos() <FCHAVES> <PONTOVIRGULA>)
| (<WHILE> Exp() <DO> <ACHAVES> SeqComandos() <FCHAVES> <PONTOVIRGULA>)
| (<RETURN> Exp() <PONTOVIRGULA>)
| (<PRINTIO> Exp() <PONTOVIRGULA>)
}


/*
TOKENIDLINE -> ":=" TOKENIDLINELINE | "(" LISTAEXP? ")" ";" 
*/

void TokenIdLine():
{}
{

  (<ATRIBUICAO> TokenIdLineLine())
  | (<APAR> (ListaExp())? <FPAR> <PONTOVIRGULA>)

}
/*
TOKENIDLINELINE -> EXP ";" | "readIO" "(" ")"
*/

void TokenIdLineLine():
{}
{

  (Exp() <PONTOVIRGULA>) | (<READIO> <APAR> <FPAR>)

}



/*
EXP -> "(" EXP OP EXP ")" | FATOR
*/

void Exp():
{}
{
  (Fator()) | (<APAR> Exp() Op() Exp() <FPAR>) 
}

/*
FATOR -> TOKEN_id FATORLINE | TOKEN_numliteral | "true" | "false"
FATORLINE -> ("(" LISTAEXP? ")")?
*/

void Fator():
{}
{
  TokenId() FatorLine()
  | Token_NumLiteral()
  | <TRUE>
  | <FALSE>
}

void FatorLine():
{}
{
  (<APAR> (ListaExp())? <FPAR>)?
}

/*
LISTAEXP -> EXP LISTAEXPLINE
LISTAEXPLINE -> ("," EXP LISTAEXPLINE)?
*/

void ListaExp():
{}
{
  (Exp() ListaExpLine())
}

void ListaExpLine():
{}
{
  (<VIRGULA> Exp() ListaExpLine())?
}


void Token_NumLiteral():
{}
{

  <NUM>

}

void Op():
{}
{

  <SOMA>
  | <SUB>
  | <MULT>
  | <DIV>
  | <AND>
  | <OR>
  | <MENOR>
  | <MAIOR>
  | <IGUALDADE>

}


/*
FUNC -> "def" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}" FUNCLINE
FUNCLINE -> ("def" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}" FUNCLINE)?
*/

void Func():
{}
{

  (<DEF> Tipo() TokenId() <APAR> (ListaArg())? <FPAR> <ACHAVES> VarDecl() SeqComandos() <FCHAVES> FuncLine())

}

void FuncLine():
{}
{

  (<DEF> Tipo() TokenId() <APAR> (ListaArg())? <FPAR> <ACHAVES> VarDecl() SeqComandos() <FCHAVES> FuncLine())?

}
/*
LISTAARG -> TIPO TOKEN_id LISTAARGLINE
LISTAARGLINE -> ("," TIPO TOKEN_id LISTAARGLINE)?
*/
void ListaArg():
{}
{

  Tipo() TokenId() ListaArgLine()

}

void ListaArgLine():
{}
{

  (<VIRGULA> Tipo() TokenId() ListaArgLine())?

}
